name: ci/cd

on:
  push:
    branches:
      - master
      - develop
      - 'feature/**'

jobs:
  producer:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: kafka-producer
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          java-version: ${{ secrets.JAVA_VERSION }}
          distribution: 'adopt'
          architecture: x64
      - name: Scan current project
        id: scan
        uses: anchore/scan-action@v2
        with:
          path: "./kafka-producer"
          fail-build: true
          acs-report-enable: true
      - name: upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
      - name: GRADLE PREPARATION
        run: chmod +x gradlew
      - name: PRODUCER COMPILATION
        run: ./gradlew compileKotlin -x compileJava --parallel
      - name: PRODUCER TESTS
        run: ./gradlew test -x compileTestJava --parallel
      - name: PRODUCER BUILD
        run: ./gradlew build -x test -x compileJava --parallel
      - name: PRODUCER DOCKER DELIVERY
        if: github.ref == 'refs/heads/master'
        run: ./gradlew jib -Djib.to.image=${{ secrets.DOCKER_HUB_REGISTRY }}/${{ secrets.DOCKER_HUB_USER }}/producer:latest -Djib.to.auth.username=${{ secrets.DOCKER_HUB_USER }} -Djib.to.auth.password=${{ secrets.DOCKER_HUB_PASSWORD }}
  consumer:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: kafka-consumer
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          java-version: ${{ secrets.JAVA_VERSION }}
          distribution: 'adopt'
          architecture: x64
      - name: Scan current project
        id: scan
        uses: anchore/scan-action@v2
        with:
          path: "./kafka-consumer"
          fail-build: true
          acs-report-enable: true
      - name: upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
      - name: GRADLE PREPARATION
        run: chmod +x gradlew
      - name: CONSUMER COMPILATION
        run: ./gradlew compileKotlin -x compileJava --parallel
      - name: CONSUMER TESTS
        run: ./gradlew test -x compileTestJava --parallel
      - name: CONSUMER BUILD
        run: ./gradlew build -x test -x compileJava --parallel
      - name: CONSUMER DOCKER DELIVERY
        if: github.ref == 'refs/heads/master'
        run: ./gradlew jib -Djib.to.image=${{ secrets.DOCKER_HUB_REGISTRY }}/${{ secrets.DOCKER_HUB_USER }}/consumer:latest -Djib.to.auth.username=${{ secrets.DOCKER_HUB_USER }} -Djib.to.auth.password=${{ secrets.DOCKER_HUB_PASSWORD }}
  gateway:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: gateway
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          java-version: ${{ secrets.JAVA_VERSION }}
          distribution: 'adopt'
          architecture: x64
      - name: Scan current project
        id: scan
        uses: anchore/scan-action@v2
        with:
          path: "./gateway"
          fail-build: true
          acs-report-enable: true
      - name: upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
      - name: GRADLE PREPARATION
        run: chmod +x gradlew
      - name: GATEWAY COMPILATION
        run: ./gradlew compileKotlin -x compileJava --parallel
      - name: GATEWAY TESTS
        run: ./gradlew test -x compileTestJava --parallel
      - name: GATEWAY BUILD
        run: ./gradlew build -x test -x compileJava --parallel
      - name: GATEWAY DOCKER DELIVERY
        if: github.ref == 'refs/heads/master'
        run: ./gradlew jib -Djib.to.image=${{ secrets.DOCKER_HUB_REGISTRY }}/${{ secrets.DOCKER_HUB_USER }}/gateway:latest -Djib.to.auth.username=${{ secrets.DOCKER_HUB_USER }} -Djib.to.auth.password=${{ secrets.DOCKER_HUB_PASSWORD }}
  config-server:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: config-server
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          java-version: ${{ secrets.JAVA_VERSION }}
          distribution: 'adopt'
          architecture: x64
      - name: Scan current project
        id: scan
        uses: anchore/scan-action@v2
        with:
          path: "./config-server"
          fail-build: true
          acs-report-enable: true
      - name: upload Anchore scan SARIF report
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.scan.outputs.sarif }}
      - run: echo $GIT_CONFIG_URL
      - name: GRADLE PREPARATION
        run: chmod +x gradlew
      - name: CONFIG SERVER COMPILATION
        env:
          GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
          GIT_PASSWORD: ${{ secrets.GIT_PASSWORD }}
          GIT_CONFIG_URL: ${{ secrets.GIT_CONFIG_URL }}
        run: ./gradlew compileKotlin -x compileJava --parallel
      - name: CONFIG SERVER BUILD
        env:
          GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
          GIT_PASSWORD: ${{ secrets.GIT_PASSWORD }}
          GIT_CONFIG_URL: ${{ secrets.GIT_CONFIG_URL }}
        run: ./gradlew build -x test -x compileJava --parallel
      - name: CONFIG SERVER DOCKER DELIVERY
        if: github.ref == 'refs/heads/master'
        env:
          GIT_USERNAME: ${{ secrets.GIT_USERNAME }}
          GIT_PASSWORD: ${{ secrets.GIT_PASSWORD }}
          GIT_CONFIG_URL: ${{ secrets.GIT_CONFIG_URL }}
        run: ./gradlew jib -Djib.to.image=${{ secrets.DOCKER_HUB_REGISTRY }}/${{ secrets.DOCKER_HUB_USER }}/config-server:latest -Djib.to.auth.username=${{ secrets.DOCKER_HUB_USER }} -Djib.to.auth.password=${{ secrets.DOCKER_HUB_PASSWORD }}
  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: notification-app
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '15'
          check-latest: true
      - name: NPM installation
        run: npm install --only=prod --silent
      - name: NPM building
        run: npm run build
      - name: Set up QEMU
        if: github.ref == 'refs/heads/master'
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        if: github.ref == 'refs/heads/master'
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        if: github.ref == 'refs/heads/master'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Docker
        if: github.ref == 'refs/heads/master'
        uses: docker/build-push-action@v2
        with:
          context: ./notification-app/.
          push: true
          tags: fragaly/web:latest
